@page "/"
@inject AuthService Auth
@inject VpnService Vpn
@inject NetworkSpeedService SpeedService


<h1 class="text-center" style="user-select: none">VPN Приложение</h1>

<div class="container mt-4 text-center">

    @if (!IsLoggedIn)
    {
        <h4 style="user-select: none">Авторизация</h4>
        <div class="mb-2">
            <input class="form-control w-50 mx-auto" placeholder="Email" @bind="Email" />
        </div>
        <div class="mb-2">
            <input class="form-control w-50 mx-auto" placeholder="Пароль" type="password" @bind="Password" />
        </div>

        @if (IsRegistering)
        {
            <div class="mb-2">
                <input class="form-control w-50 mx-auto" placeholder="Повторите пароль" type="password" @bind="RepeatPassword" />
            </div>
        }


        <button class="btn btn-primary me-2" @onclick="HandleLoginOrRegister">
            @(IsRegistering ? "Зарегистрироваться" : "Войти")
        </button>
        <button class="btn btn-secondary" @onclick="@(() => IsRegistering = !IsRegistering)">
            @(IsRegistering ? "У меня есть аккаунт" : "Регистрация")
        </button>
    }
    else
    {
        <div class="mt-4">
            <h5>Скорость соединения:</h5>
            <pre>@SpeedText</pre>
        </div>

        <div class="d-flex justify-content-center gap-3 mt-4">
            <button class="btn btn-success btn-lg" @onclick="ConnectToVpn">
                Подключиться к VPN
            </button>

            <button class="btn btn-danger btn-lg" @onclick="DisconnectVpn">
                Отключиться от VPN
            </button>
        </div>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger w-50 mx-auto mt-3" role="alert">
                @ErrorMessage
            </div>
        }


    }
</div>

@code {
    private string Email = "";
    private string Password = "";
    private string RepeatPassword = "";
    private bool IsRegistering = false;
    private bool IsLoggedIn = false;
    private string SpeedText = "Загрузка...";
    private System.Threading.Timer? speedTimer;

    protected override void OnInitialized()
    {
        StartSpeedTimer();
    }

    private void StartSpeedTimer()
    {
        speedTimer = new System.Threading.Timer(_ =>
        {
            SpeedText = SpeedService.GetNetworkSpeed();
            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    public void Dispose()
    {
        speedTimer?.Dispose();
    }


    private async Task HandleLoginOrRegister()
    {
        bool success = IsRegistering
            ? await Auth.RegisterAsync(Email, Password, RepeatPassword)
            : await Auth.LoginAsync(Email, Password);

        if (success)
        {
            IsLoggedIn = true;
        }
        else
        {
            await ShowError("Ошибка авторизации или регистрации.");
        }
    }

    private async Task ConnectToVpn()
    {
        var result = await Vpn.ConnectAsync();
        if (!result)
            await ShowError("Не удалось подключиться к VPN.");
    }

    private async Task DisconnectVpn()
    {
        await Vpn.DisconnectAsync();
    }

    private string? ErrorMessage;

    private async Task ShowError(string message)
    {
        ErrorMessage = message;
        StateHasChanged(); // Принудительно отрисовать

        // Подождать 3 секунды и убрать сообщение
        await Task.Delay(3000);
        ErrorMessage = null;
        await InvokeAsync(StateHasChanged);
    }

}
